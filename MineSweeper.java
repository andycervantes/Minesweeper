import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.Container;import java.awt.Dimension;import java.awt.Font;import java.awt.GridLayout;import java.awt.Image;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.io.File;import java.util.Random;import javax.imageio.ImageIO;import javax.swing.BoxLayout;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JMenu;import javax.swing.JMenuBar;import javax.swing.JMenuItem;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTextField;import javax.swing.SwingUtilities;public class MineSweeper extends JFrame{	private static final int SIZE = 10;	private static boolean firstClick = false;	private Container container;	private JPanel mainPanel;	private JLabel timeLabel;	private JLabel mineLabel;	private JLabel mineCounter;	private static JLabel timeCounter;	// button has been clicked	private boolean[][] revealed;	// button has been flagged	private boolean[][] flagged;	private static Image flag;	private static Image newFlag;	private static Image mine;	private static Image newMine;	private static Image question;	private static Image newQuestion;	private static boolean gameOver = false;	private int revealedCount = 0;	private JButton[][] button;	private MineField grid = new MineField();	private static MineSweeper game;	JPanel field = new JPanel(new GridLayout(SIZE, SIZE, 1, 1));		private static Score scoreData;	private static Timer time;		public static void main(String[] args)	{		// images		try		{			flag = ImageIO.read(new File("images/flag.png"));			newFlag = flag.getScaledInstance(20, 20, java.awt.Image.SCALE_SMOOTH);			mine = ImageIO.read(new File("images/mine.png"));			newMine = mine.getScaledInstance(20, 20, java.awt.Image.SCALE_SMOOTH);			question = ImageIO.read(new File("images/question.png"));			newQuestion = question.getScaledInstance(20, 20, java.awt.Image.SCALE_SMOOTH);		}		catch (Exception rekt)		{			System.out.println("Cannot load images!");			System.exit(1);		}		game = new MineSweeper();		game.setVisible(true);				// band aid		for( int i = 0; i < SIZE; i++ )			for( int j = 0; j < SIZE ; j++ )				if (game.isMine(i+1, j+1))					game.foundMine();		scoreData = new Score();		scoreData.setScore(0);		time = new Timer(scoreData, game);	}	// increase timer every second	public void updateTime()	{		// line below seems to be increasing exponentially...//		int timeCount = scoreData.getScore();		if ( firstClick && !gameOver )		{			int timeCount = Integer.parseInt(timeCounter.getText());			++timeCount;					if( timeCount < 10 )				timeCounter.setText( "00" + timeCount );			else if( timeCount < 100 )				timeCounter.setText( "0" + timeCount );			else				timeCounter.setText( "" + timeCount );		//			timeCounter.setText(Integer.toString(timeCount));		}	}	// function for printing info of outcome of the game	private void endGame( boolean lost )	{		gameOver = true;			// show all mines and disable all buttons		for( int i = 0; i < SIZE; i++ )			for( int j = 0; j < SIZE ; j++ )			{				// when the game is lost				if( lost )				{					// show all mines that have not been revealed					if (this.isMine(i+1, j+1) && !revealed[i][j])					{						button[i][j].setBackground(Color.LIGHT_GRAY);						button[i][j].setIcon( new ImageIcon(newMine) );						button[i][j].setEnabled( false );						button[i][j].setDisabledIcon(new ImageIcon(newMine));					}					// if the button is flagged, then disable the button and set the disabled icon					else if ( flagged[i][j] )					{						button[i][j].setEnabled( false );						button[i][j].setDisabledIcon(new ImageIcon(newFlag));					}					// if the button has not been revealed and it has not been flagged then disable the button//					else if (!revealed[i][j] && !flagged[i][j])//						button[i][j].setEnabled( false );					// everything else					else					{						button[i][j].setEnabled( false );						// set the disabled icon on the mine that caused the lost game						if (this.isMine(i+1, j+1))							button[i][j].setDisabledIcon(new ImageIcon(newMine));//						button[i][j].setForeground(Color.BLACK);					}				}				// when the game is won				else				{					// if its a mine, display them					if ( this.isMine(i+1,j+1) )						button[i][j].setIcon(new ImageIcon(newMine));					button[i][j].setEnabled(false);				}			}					if(!lost)				scoreData.didWin();						int[] scores = scoreData.getTopScore();			int score = MineSweeper.getScore();						// the player won so ask for their name			if (!lost)			{				for(int i = 0; i < 10; i++)				{					if(score < scores[i])					{						String name = JOptionPane.showInputDialog( "Your score of " + score + " made it into TOP TEN!\nPlease enter your name:" );						if (name == null)							name = "Unknown Player";												scoreData.gameEnd(name);						break;					}				}			}	}		public MineSweeper() {		// get the container from the frame		container = this.getContentPane();		this.getContentPane().setLayout(new BorderLayout());		// set frame data		this.setTitle("Minesweeper");		this.setLocation(100, 100);		this.setResizable(true);		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		this.setSize(400, 400);		this.setVisible(true);		// create main panel; the order of these matter!!!		mainPanel = new JPanel(new GridLayout(2, 3, 5, 3));		// add the mines caption		mineLabel = new JLabel("Mines");		mineLabel.setHorizontalAlignment(JLabel.CENTER);		mainPanel.add(mineLabel);		// placeholder		mainPanel.add(new JLabel());		// add the timer caption		timeLabel = new JLabel("Timer");		timeLabel.setHorizontalAlignment(JLabel.CENTER);		mainPanel.add(timeLabel);		// JLabel that shows number of mines left on a field		mineCounter = new JLabel("" + 10);		mineCounter.setHorizontalAlignment(JLabel.CENTER);		mineCounter.setForeground(Color.red);		mineCounter.setFont(new Font("DialogInput", Font.BOLD, 18));		mainPanel.add(mineCounter);		// placeholder in order to keep game data aligned		mainPanel.add(new JLabel(""));		// JLabel that shows elapsed time		timeCounter = new JLabel("000");		timeCounter.setHorizontalAlignment(JLabel.CENTER);		timeCounter.setForeground(Color.red);		timeCounter.setFont(new Font("DialogInput", Font.BOLD, 18));		mainPanel.add(timeCounter);		// add the main panel to the container		container.add(mainPanel, BorderLayout.NORTH);		// create the menu bar		JMenuBar mainMenu = new JMenuBar();		// create the game menu entry		JMenu gameMenu = new JMenu("Game");		gameMenu.setMnemonic(KeyEvent.VK_G);		// create menu sub entry		JMenuItem menuReset = new JMenuItem("Reset");		menuReset.setMnemonic(KeyEvent.VK_R);		menuReset.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent event) {				MineSweeper.gameEnd(false);				field.removeAll();				mineCounter.setText("10");				timeCounter.setText("000");				firstClick = false;				gameOver = false;				revealedCount = 0;				scoreData.setScore(0);				MineSweeperGUI(10, 10);				revalidate();				repaint();			}		});		// create menu sub entry		JMenuItem menuTop = new JMenuItem("Top Ten");		menuTop.setMnemonic(KeyEvent.VK_T);		menuTop.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent event) {				Component frame = null;								String entry = "";				int[] TopTen = MineSweeper.getTopTen();				String[] TopTenNames = MineSweeper.getTopNames();								for (int i = 0; i < MineSweeper.getTopTen().length; i++)					entry += TopTenNames[i] + ": " + TopTen[i] + "\n";				JOptionPane.showMessageDialog(frame, entry, "Top Ten", JOptionPane.PLAIN_MESSAGE);			}		});		// create menu sub entry		JMenuItem menuExit = new JMenuItem("Exit");		menuExit.setMnemonic(KeyEvent.VK_E);		menuExit.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent event) {				System.exit(0);			}		});		// create the help menu entry		JMenu helpMenu = new JMenu("Help");		helpMenu.setMnemonic(KeyEvent.VK_H);		// create the menu sub entry		JMenuItem menuHelp = new JMenuItem("Help");		menuHelp.setMnemonic(KeyEvent.VK_L);		menuHelp.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent event) {				Component frame = null;				JOptionPane.showMessageDialog(frame, "To start click on any button.\nGame will end when you left click on a mine or you sucessfully navigate around and click on all non spaces.", "Help", JOptionPane.PLAIN_MESSAGE);			}		});		// create the menu sub entry		JMenuItem menuAbout = new JMenuItem("About");		menuAbout.setMnemonic(KeyEvent.VK_A);		menuAbout.addActionListener(new ActionListener() {			@Override			public void actionPerformed(ActionEvent event) {				Component frame = null;				JOptionPane.showMessageDialog(frame, "Students:\nAndy Cervantes - acerva22\nMaxwell Petersen - mpeter39\nHW2 - MineSweeper", "About", JOptionPane.PLAIN_MESSAGE);			}		});		// add the sub menus to the game menu		gameMenu.add(menuReset);		gameMenu.add(menuTop);		gameMenu.add(menuExit);		// add the sub menus to the help menu		helpMenu.add(menuHelp);		helpMenu.add(menuAbout);		// add the menus to the main menu		mainMenu.add(gameMenu);		mainMenu.add(helpMenu);		// add the menu bar to the frame and make it visible		this.setJMenuBar(mainMenu);		this.setVisible(true);		// setup the gui for minesweeper		MineSweeperGUI(10, 10);	}	public void MineSweeperGUI(int numRows, int numCols)	{		// since this makes it easier to manage, why not make an array of JButtons		// and add that to that JPanel instead of JPanelling a list of single		// buttons...		button = new JButton[numRows][numCols];		// used to create grids that contain clicking info		revealed = new boolean[numRows][numCols];		flagged = new boolean[numRows][numCols];		for (int i = 0; i < numRows; i++) {			for (int j = 0; j < numCols; j++) {				revealed[i][j] = false;				flagged[i][j] = false;			}		}		// initialize the mine field		grid = new MineField();		// create the grid layout for the JPanel frame		// set each cell as a button		for (int i = 0; i < numRows; i++)		{			for (int j = 0; j < numCols; j++)			{				button[i][j] = new JButton();				button[i][j].setPreferredSize(new Dimension(20, 20));				button[i][j].setMargin(new Insets(0, 0, 0, 0));				button[i][j].addMouseListener(new MouseHandler(i, j, grid));				field.add(button[i][j]);			}		}		getContentPane().add(field, BorderLayout.CENTER);	}	// left mouse click helper	public void leftMouseClick(int row, int col)	{		if (!revealed[row][col] && !flagged[row][col])		{			// used to start the timer			if ( !firstClick )			{				firstClick = true;				MineSweeper.gameStart(game);			}						// extra book keeping			revealed[row][col] = true;//			revealedCount++;						switch (grid.getValue(row + 1, col + 1))			{				case -1:					try					{						button[row][col].setIcon(new ImageIcon(newMine));					}					catch (Exception rekt)					{						System.out.println("Cannot load image!");					}					button[row][col].setBackground(Color.RED);										// if they click on a mine then game over					endGame(true);					JOptionPane.showMessageDialog(rootPane, "You lost the game.");					break;				case 0:					this.revealedCount++;					button[row][col].setBackground(Color.LIGHT_GRAY);										// recursive function to check surrounding buttons					for (int i = -1; i <= 1; i++)						for (int j = -1; j <= 1; j++)							try							{								leftMouseClick(row + i, col + j);							}							catch (Exception rekt)							{							}//					System.out.println(revealedCount);					break;				default://					System.out.println(revealedCount);					this.revealedCount++;					button[row][col].setText(String.valueOf(grid.getValue(row + 1, col + 1)));					button[row][col].setBackground(Color.LIGHT_GRAY);					break;			}			//			System.out.println(this.getMinesLeft());			if (Math.abs(this.getMinesLeft() + revealedCount ) == 90 )//			if (revealedCount >= 90 )//			if (!gameOver && button.length * button[0].length - revealedCount == 10)			{				JOptionPane.showMessageDialog(rootPane, "You won the game.");				endGame(false);			}		}	}	// function that handles left and right clicks	private class MouseHandler extends MouseAdapter	{		private int count = 0;		private int row;		private int col;		private int cycle = 0;		// constructor that saves coords and the grid		public MouseHandler(int x, int y, MineField g)		{			this.row = x;			this.col = y;			grid = g;		}		public void mouseClicked(MouseEvent event)		{			// if game over, don't allow them to click any more buttons			if ( gameOver )				return;			// right click button info updater			if (SwingUtilities.isRightMouseButton(event))			{				if (!revealed[this.row][this.col])				{					// timer start					if ( !firstClick )					{						firstClick = true;						MineSweeper.gameStart(game);					}										cycle %= 3;										switch (cycle)					{						// flag						case 0:							if (Integer.parseInt(mineCounter.getText()) <= 0)								return;							else							{								count = Integer.parseInt(mineCounter.getText());								--count;								mineCounter.setText("" + count);							}													try							{								button[this.row][this.col].setIcon(new ImageIcon(newFlag));							}							catch (Exception rekt)							{								System.out.println("Cannot load image!");							}							flagged[this.row][this.col] = true;							break;														// question						case 1:							button[this.row][this.col].setIcon(null);							try							{								button[this.row][this.col].setIcon(new ImageIcon(newQuestion));							}							catch (Exception rekt)							{								System.out.println("Cannot load image!");							}							button[this.row][this.col].setBackground(null);							break;														// reset						case 2:							flagged[this.row][this.col] = false;							button[this.row][this.col].setIcon(null);							button[this.row][this.col].setBackground(null);							count = Integer.parseInt(mineCounter.getText());							++count;							mineCounter.setText("" + count);							break;					}					cycle++;				}			}			// left click button info updater			if (SwingUtilities.isLeftMouseButton(event))			{				leftMouseClick(this.row, this.col);			}		}	}	///	/// functions from ProcessingTier for testing	///			// check for the values stored to be a mine	public boolean isMine( int x, int y )	{		//gets the values stored at the mine grid location		int value = this.grid.getValue( x, y );		//checks if mine returns accordingly		if ( value == -1 )		{			return true;		}		else		{			return false;		}	}		// assumed to be called from a non mine spot	public int minesNearby( int x, int y )	{		return this.grid.getValue( x, y );	}		//return the total amount of mines 	public int getMinesLeft(  )	{		return this.grid.totalRemainingMines(  );	}		//gets the current score to display	public static int getScore(  )	{		return MineSweeper.scoreData.getScore(  );	}		//returns the top ten scores	public static int[] getTopTen(  )	{		return MineSweeper.scoreData.getTopScore(  );	}		//used to return the names for the top ten	public static String[] getTopNames(  )	{		return MineSweeper.scoreData.getTopNames(  );	}		//updates the count of mines left to find	public void foundMine(  )	{		this.grid.setRemainingMines( this.grid.totalRemainingMines(  ) - 1 );	}		//starts the game	public static void gameStart(MineSweeper instance)	{		MineSweeper.scoreData.gameStart(instance);	}		//ends the game	public static void gameEnd( boolean winner )	{		//if the player is a winner then save the score		if ( winner )		{			MineSweeper.scoreData.didWin(  );		}		//else just clean up;		MineSweeper.scoreData.gameEnd(null  );	}		//used to debug the mine locations	private void printMineField(  )	{		this.grid.print(  );	}}